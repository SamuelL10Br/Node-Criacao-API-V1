Usando o get no postman esse endere√ßo: http://localhost:3000/health

1) Criar usu√°rio (POST)

Abra uma nova aba no Postman.

M√©todo: POST

URL:

http://localhost:3000/api/users


V√° em Body ‚Üí selecione raw ‚Üí escolha JSON.

Cole este JSON:

{
  "name": "Samuel",
  "email": "samuel@example.com",
  "password": "segredo123"
}


Clique Send.

‚úÖ Esperado: Status 201 e um objeto JSON voltando com _id, name, email, passwordHash, createdAt, updatedAt.

Se der erro:

404 ‚Üí confira se a URL come√ßa com /api/users (tem o /api!).

duplicate key ‚Üí troque o email e tente de novo.

2) Listar usu√°rios (GET)

Nova aba (ou duplique a anterior).

M√©todo: GET

URL:

http://localhost:3000/api/users


Send.

‚úÖ Esperado: uma lista com o usu√°rio que voc√™ acabou de criar.

||||||-----------------------||||||-----------------------||||||

5) Testes no Postman (copiar e colar)
a) Listar
GET  http://localhost:3000/api/users

b) Criar (j√° fez, mas repito)
POST http://localhost:3000/api/users
Body (JSON):
{
  "name": "Samuel",
  "email": "samuel@example.com",
  "password": "segredo123"
}


Guarde o _id retornado. Ex.: 66b0d0a6398e400ed808bb20

c) Buscar por ID
GET  http://localhost:3000/api/users/66b0d0a6398e400ed808bb20

d) Atualizar (parcial)
PATCH http://localhost:3000/api/users/66b0d0a6398e400ed808bb20
Body (JSON):
{
  "name": "Samuel Luciano"
}

e) Remover
DELETE http://localhost:3000/api/users/66b0d0a6398e400ed808bb20


Se o ID n√£o existir ‚Üí 404 { "error": "User not found" }

Se o email duplicar (quando adicionarmos valida√ß√£o) ‚Üí vai dar erro do Mongo; a gente deixa bonito depois.

quer deixar ‚Äúcom cara de produ√ß√£o‚Äù depois?

esconder passwordHash das respostas (sanitizar)

valida√ß√£o de entrada (Zod)

middleware de erros padronizado

pagina√ß√£o / filtros

mas antes, me diz: GET /:id, PATCH e DELETE funcionaram a√≠ no Postman? Se algo falhar, me manda o print da resposta e eu corrijo j√°.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

perfeito!! üéâ o GET /api/users/:id est√° funcionando (200 OK).
vamos fechar o CRUD no Postman com PATCH (atualizar) e DELETE (remover).

1) Atualizar usu√°rio (PATCH)

m√©todo: PATCH

URL (use o _id que voc√™ j√° tem):

http://localhost:3000/api/users/68b0d0a6398e400edd80bb20


Body ‚Üí raw ‚Üí JSON:

{
  "name": "Samuel Luciano"
}


Send ‚Üí esperado: 200 OK e o JSON do usu√°rio j√° com name atualizado.

tamb√©m d√° pra atualizar email ou password:

{
  "email": "samuel2@example.com"
}


ou

{
  "password": "novaSenhaSegura123"
}


(Quando manda password, o service transforma em passwordHash.)

Se o ID n√£o existir ‚Üí 404 { "error": "User not found" }.

2) Remover usu√°rio (DELETE)

m√©todo: DELETE

URL:

http://localhost:3000/api/users/68b0d0a6398e400edd80bb20


Send ‚Üí esperado: 200 OK

{ "success": true }


Depois, um GET /api/users/:id nesse mesmo id deve dar 404.

3) Dicas r√°pidas

Se o Postman estiver estranho, abra aba nova e digite a URL sem colar (evita %0A no fim).

Sempre que editar c√≥digo .js, Ctrl+C para parar e rode de novo node .\src\server.js.

4) Pr√≥ximos upgrades (quando voc√™ quiser)

Ocultar passwordHash nas respostas (sanitizar).

Valida√ß√£o de entrada (Zod) e mensagens de erro bonitinhas.

Pagina√ß√£o e filtros em GET /api/users.

JWT (login e autoriza√ß√£o).

Quer que eu j√° aplique a valida√ß√£o com Zod e esconder o passwordHash nas respostas, ou prefere fazer primeiro os testes de PATCH e DELETE e me dizer o resultado?

